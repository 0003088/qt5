HOW TO BUILD QT5
================


 Synopsis
 ========

   System requirements
   ------------------

    - Perl 5.8 or later
    - Python 2.7 or later
    - C++ compiler supporting the C++98 standard

     For other platform specific requirements,
     please see section "Setting up your machine" on:
     http://qt-project.org/wiki/Get_The_Source

   Optional requirements
   ---------------------

   - OpenSSL for SSL sockets or HTTPS
   - Wayland
   - See QtWebKit section.

   New dependencies in Qt 5
   ------------------------

     Linux: On systems running X11, the XCB libraries are required for
     the platform plugin to build. qtbase/src/plugins/platforms/xcb/README
     lists the required packages.

     Qt 5 can make use of the ICU libraries providing Unicode and Globalization
     support (see http://site.icu-project.org/). They are required for building
     QtWebKit.
     On Linux, they will be auto-detected.
     On Windows, they need to be manually installed and the "include" and "lib"
     folders of the ICU installation must be appended to the INCLUDE and LIB
     environment variables after calling the Windows SDK setup script.
     The "bin" folder of the ICU installation should be appended to the PATH
     environment variable in order to for the DLLs to be found at run-time.

   Linux, Mac:
   -----------

     cd <path>/qt-everywhere-opensource-src-<version>
     export PATH=$PATH:$PWD/qtbase/bin
     ./configure -prefix $PWD/qtbase -opensource -nomake tests
     ./build -j 4

   Windows:
   --------

     Open a Windows SDK (7.0, 7.1 or later) command prompt. Ensure that Perl
     version 5.12 or later and Python version 2.7 or later can be found in the
     path.

     cd <path>\qt-everywhere-opensource-src-<version>
     set PATH=%PATH%;%CD%\qtbase\bin;
     configure -prefix %CD%\qtbase -opensource -nomake tests
     perl build

     For MinGW (gcc version 4.6 or later), ensure that the compiler can
     be found in the path.

     The build script will use jom if it's found in the path, which means you can
     use -j <n> options on Windows as well. If not, the /MP option is added to the
     compile options of the Microsoft Visual Studio compiler, to use all available
     cores for batch building.

 More details follow.

 Building QtWebKit
 =================

   Linux, Mac:
   -----------

     The tools bison, flex and gperf which are required for building.

     cd qtwebkit
     export WEBKITOUTPUTDIR=$$PWD/WebKitBuild
     perl Tools/Scripts/build-webkit --qt --qmake=../qtbase/bin/qmake --install-libs=<install dir> --release --makeargs=$MAKEFLAGS

   Windows:
   --------

     The tools bison, flex and gperf which are required for building are
     provided for convenience in the folder gnuwin32\bin.

     set PATH=%PATH%;%CD%\gnuwin32\bin
     cd qtwebkit
     set WEBKITOUTPUTDIR=%CD%/WebKitBuild
     perl Tools\Scripts\build-webkit --qt --qmake=..\qtbase\bin\qmake.exe --install-libs=<install dir> --release --makeargs=%MAKEFLAGS%


 Build!
 ======

 A typical `configure; make' build process is used.

 Some relevant configure options (see configure -help):

 -release              Compile and link Qt with debugging turned off.
 -debug                Compile and link Qt with debugging turned on.
 -nomake tests         Disable building of tests to speed up compilation
 -nomake examples      Disable building of examples to speed up compilation
 -confirm-license      Automatically acknowledge the LGPL 2.1 license.

 Example for a release build:
 (adjust the `-jN' parameter as appropriate for your system)

   ./configure -prefix $PWD/qtbase -opensource
   make -j4

 Example for a developer build:
 (enables more autotests, builds debug version of libraries, ...)

   ./configure -developer-build -opensource
   make -j4

 See output of `./configure -help' for documentation on various options to
 configure.

 The above examples will build whatever Qt5 modules have been enabled by
 default in the build system.

 It is possible to build selected modules with their dependencies by doing
 a `make module-<foo>'.  For example, to build only qtscript and qtwebkit,
 and the modules they depend on:

   ./configure -prefix $PWD/qtbase -opensource
   make -j4 module-qtscript module-qtwebkit

 This can save a lot of time if you are only interested in a subset of Qt5.


 Hints
 =====

 Shadow builds are possible, but not as well tested/supported as in-source
 builds.

 The submodule repository qtrepotools contains useful scripts for
 developers and release engineers. Consider adding qtrepotools/bin
 to your PATH environment variable to access them.

 The qt5_tool in qtrepotools has some more features which may be of interest.
 Try `qt5_tool --help'.


 Building Qt5 from git
 =====================
 See http://qt-project.org/wiki/Building-Qt-5-from-Git and README.git
 for more information.
