HOW TO BUILD QT5
================


 Synopsis
 ========

     See http://qt-project.org/wiki/Building_Qt_5_from_Git for instructions
     on building Qt 5.

   New dependencies in Qt 5
   ------------------------

     Linux: On systems running X11, the XCB libraries are required for
     the platform plugin to build. qtbase/src/plugins/platforms/xcb/README
     lists the required packages.

     Qt 5 can make use of the ICU libraries providing Unicode and Globalization
     support (see http://site.icu-project.org/). They are required for building
     QtWebKit.
     On Linux, they will be auto-detected.
     On Windows, they need to be manually installed and the "include" and "lib"
     folders of the ICU installation must be appended to the INCLUDE and LIB
     environment variables after calling the Windows SDK setup script.
     The "bin" folder of the ICU installation should be appended to the PATH
     environment variable in order to for the DLLs to be found at run-time.

   Linux, Mac:
   -----------

     cd <path>/qt-everywhere-opensource-src-<version>
     export PATH=$PATH:$PWD/qtbase/bin
     ./configure -prefix $PWD/qtbase -opensource -nomake tests
     make -j4

   Windows:
   --------

     Open a Windows SDK (7.0, 7.1 or later) command prompt. Ensure that Perl
     version 5.12 or later and Python version 2.7 or later can be found in the
     path.

     cd <path>\qt-everywhere-opensource-src-<version>
     set PATH=%PATH%;%CD%\qtbase\bin;%CD%\gnuwin32\bin
     configure -prefix %CD%\qtbase -opensource -nomake tests
     nmake

     For MinGW (gcc version 4.6 or later), ensure that the compiler can
     be found in the path.

 More details follow.

 Building QtWebKit
 =================

   Linux, Mac:
   -----------

     The tools bison, flex and gperf which are required for building.

     cd qtwebkit
     export WEBKITOUTPUTDIR=$$PWD/WebKitBuild
     perl Tools/Scripts/build-webkit --qt --qmake=../qtbase/bin/qmake --install-libs=<install dir> --release --makeargs=$MAKEFLAGS

   Windows:
   --------

     The tools bison, flex and gperf which are required for building are
     provided for convenience in the folder gnuwin32\bin.

     set PATH=%PATH%;%CD%\gnuwin32\bin
     cd qtwebkit
     set WEBKITOUTPUTDIR=%CD%/WebKitBuild
     perl Tools\Scripts\build-webkit --qt --qmake=..\qtbase\bin\qmake.exe --install-libs=<install dir> --release --makeargs=%MAKEFLAGS%

 Get The Submodules
 ==================

 Obtaining the source code is described in detail at
 http://wiki.qt-project.org/Main_Page and
 http://qt-project.org/wiki/Get_The_Source.

 Cloning Qt5 does not automatically clone all submodules.
 To get the submodules, it is recommended to use the `init-repository' script.

   ./init-repository

 See `./init-repository -help' for full documentation on the many supported
 options.


 Update The Submodules (optional)
 ================================

 After a plain `git clone' and `init-repository', you will have each submodule
 checked out to a particular SHA1.  This combination of SHA1s is guaranteed to
 have passed some basic acceptance testing.

 If (and only if!) you need newer versions of some submodules, you can manually
 fetch and/or pull and/or reset any modules you like, or use the qt5_tool to
 pull all modules:

   ./qtrepotools/bin/qt5_tool -p

 NOTE! As soon as you change the SHA1 of any submodule, you are using a
 combination of modules which is potentially untested and broken!  If you want
 something which is more likely to compile, stick to the module SHA1s provided
 in this repository.


 Install The Git Grafts (optional)
 =================================

 If you want to be able to connect the Qt5 and Qt4 development history, you
 may set up git grafts with the following command:

   git submodule foreach '../qtrepotools/bin/git-qt-grafts <path_to_history>'


 Build!
 ======

 A typical `configure; make' build process is used.

 Some relevant configure options (see configure -help):

 -release              Compile and link Qt with debugging turned off.
 -debug                Compile and link Qt with debugging turned on.
 -nomake tests         Disable building of tests to speed up compilation
 -nomake examples      Disable building of examples to speed up compilation
 -confirm-license      Automatically acknowledge the LGPL 2.1 license.

 Example for a release build:
 (adjust the `-jN' parameter as appropriate for your system)

   ./configure -prefix $PWD/qtbase -opensource
   make -j4

 Example for a developer build:
 (enables more autotests, builds debug version of libraries, ...)

   ./configure -developer-build -opensource
   make -j4

 See output of `./configure -help' for documentation on various options to
 configure.

 The above examples will build whatever Qt5 modules have been enabled by
 default in the build system.

 It is possible to build selected modules with their dependencies by doing
 a `make module-<foo>'.  For example, to build only qtscript and qtwebkit,
 and the modules they depend on:

   ./configure -prefix $PWD/qtbase -opensource
   make -j4 module-qtscript module-qtwebkit

 This can save a lot of time if you are only interested in a subset of Qt5.


 Hints
 =====

 Shadow builds are possible, but not as well tested/supported as in-source
 builds.

 The submodule repository qtrepotools contains useful scripts for
 developers and release engineers. Consider adding qtrepotools/bin
 to your PATH environment variable to access them.

 The qt5_tool in qtrepotools has some more features which may be of interest.
 Try `qt5_tool --help'.
