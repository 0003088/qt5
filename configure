#!/usr/bin/perl
####################################################################################################
#
# Mother script for Qt Modularization
#
# Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
# Contact: Nokia Corporation (qt-info@nokia.com)
#
####################################################################################################
use strict;
use warnings;

use File::Basename;
use File::Path;
use Cwd;
use Cwd 'abs_path';
use Config;

# Makes sure the arguments are directories, and creates them if not.
# Will die if there is an error.
sub ensureDir {
    foreach (@_) {
        if (-e $_) {
            if (-d $_) {
                next;
            } else {
                die ("$_ exists, but is not a directory");
            }
        }
        File::Path::mkpath($_) or die("Could not create $_");
    }
}

# `system', but also print the command
sub system_v
{
    print "+ ";
    print @_;
    print "\n";
    return system(@_);
}

my $relpath = dirname(abs_path($0));
$relpath =~ s,\\,/,g;
# the current directory is the "build tree" or "object tree"
my $outpath = getcwd();

if (! -e "$relpath/qtbase/configure") {
    die("$relpath/qtbase/configure not found. Did you forget to run \"init-repository\"?");
}

ensureDir("$outpath/qtbase");
chdir("$outpath/qtbase");
if (-e ".qmake.cache") {
    # Remove this so we can detect if configure finished properly
    unlink ".qmake.cache";
}
my $ret = system_v("$relpath/qtbase/configure @ARGV");
exit ($ret>>8) unless ($ret == 0);
if (! -e ".qmake.cache") {
    # Even though there was no error code, this file wasn't created
    # so configure didn't finish properly. This is probably because
    # the user passed -help
    exit 0;
}

chdir("$outpath");

open QMAKE_CACHE, ">.qmake.cache" || die "Could not open .qmake.cache for writing!\n";
print QMAKE_CACHE "include(\$\$PWD/qtbase/.qmake.cache)\n";
close QMAKE_CACHE;

$ret = system_v("$outpath/qtbase/bin/qmake $relpath/qt.pro");
exit ($ret>>8);
